deg_dist <- degree_distribution(facebook)
library(igraph)
library(network)
library(intergraph)
library(RColorBrewer)
nodes <- read.csv("Facebook_att.csv", header = TRUE)
links <- read.csv("Facebook_edge.csv", header = TRUE)
facebook <- graph_from_data_frame(d = links, vertices = nodes$NodeID, directed = FALSE)
facebook_net <- asNetwork(facebook)
# Load in other attributes.
facebook_net %v% "vertex.names"        <- nodes$vertex.names
facebook_net %v% "sex"                 <- nodes$sex
facebook_net %v% "friend_count"        <- nodes$friend_count
facebook_net %v% "group"               <- nodes$group
facebook_net %v% "mutual_friend_count" <- nodes$mutual_friend_count
facebook_net %v% "na"                  <- nodes$na
facebook_net %v% "relationship_status" <- nodes$relationship_status
summary(facebook_net)
plot(facebook_net, vertex.cex = 1.2, main = "Basic plot of Douglas’s Facebook friends")
degree(facebook, v=1, mode = "total")
plot(facebook_net, vertex.cex = 1.2, main = "Role of friend   v=1 in Douglas'network")
closeness(facebook, v = 1, normalized = TRUE)
betweenness(facebook, v = 1, directed = FALSE, normalized = TRUE)
eigen_centrality(facebook)$vector[1]
transitivity(facebook, type = "localundirected", vids = 1)
degree(facebook, v=2, mode = "total")
plot(facebook_net, vertex.cex = 1.2, main = "Role of friend   v=2 in Douglas'network")
closeness(facebook, v = 2, normalized = TRUE)
betweenness(facebook, v = 2, directed = FALSE, normalized = TRUE)
eigen_centrality(facebook)$vector[2]
transitivity(facebook, type = "localundirected", vids = 1)
deg <- sort(degree(facebook, mode = "all"), decreasing = TRUE)[1:5]
cls <- sort(closeness(facebook, normalized = TRUE), decreasing = TRUE)[1:5]
btw <- sort(betweenness(facebook, directed = FALSE, normalized = TRUE),decreasing = TRUE)[1:5]
# eig <- sort(eigen_centrality(facebook)['vector'], decreasing = TRUE)[1:5]
# eig is a list and not atomic element so sort() cannot sort it
eig <- eigen_centrality(facebook)[1:5]
lcl <- sort(transitivity(facebook, type = "local") , decreasing = TRUE)[1:5]
par(mfrow = c(2,2))
plot(deg, cls, main = "Degree versus closeness",
xlab = "Degree", ylab = "Closeness")
plot(deg, btw, main = "Degree versus betweenness",
xlab = "Degree", ylab = "Betweenness")
plot(deg, eig$vector[1:5], main = "Degree versus eigenvector",
xlab = "Degree", ylab = "Eigenvector")
plot(deg, lcl, main = "Degree versus local clustering",
xlab = "Degree", ylab = "Local clustering")
deg <- degree(facebook, mode = "all")
cls <- closeness(facebook, normalized = TRUE)
btw <- betweenness(facebook, directed = FALSE, normalized = TRUE)
eig <- eigen_centrality(facebook)
lcl <- transitivity(facebook, type = "local")
par(mfrow = c(2,2))
plot(deg[1:5], cls[1:5], main = "Degree versus closeness",
xlab = "Degree", ylab = "Closeness")
plot(deg[1:5], btw[1:5], main = "Degree versus betweenness",
xlab = "Degree", ylab = "Betweenness")
plot(deg[1:5], eig$vector[1:5], main = "Degree versus eigenvector",
xlab = "Degree", ylab = "Eigenvector")
plot(deg[1:5], lcl[1:5], main = "Degree versus local clustering",
xlab = "Degree", ylab = "Local clustering")
par(mfrow = c(2,2))
plot(deg, cls, main = "Degree versus closeness",
xlab = "Degree", ylab = "Closeness")
plot(deg, btw, main = "Degree versus betweenness",
xlab = "Degree", ylab = "Betweenness")
plot(deg, eig$vector, main = "Degree versus eigenvector",
xlab = "Degree", ylab = "Eigenvector")
plot(deg, lcl, main = "Degree versus local clustering",
xlab = "Degree", ylab = "Local clustering")
deg_dist <- degree_distribution(facebook)
barplot(deg_dist)
edge_density(facebook)
diameter(facebook, directed = FALSE)
transitivity(facebook, type = "global")
centr_degree(facebook)$centralization
group <- as.factor(get.vertex.attribute(facebook_net, attrname = 'group'))
pal <- brewer.pal(nlevels(group), "Set1")
plot(facebook_net, vertex.col = pal[group], vertex.cex = 1.5,
main = "Plot of Facebook Data colored by friend type")
legend(x = "bottomleft", legend = levels(group), col = pal,
pch = 19, pt.cex = 1.2, bty = "n", title = "Friend type")
sapply(levels(group), function(x) {
y <- get.inducedSubgraph(facebook_net,
which(facebook_net %v% "group" == x))
paste0("Density for ", x, " friends is ",
edge_density(asIgraph(y)))
})
cw <- cluster_walktrap(facebook)
plot(cw, facebook, vertex.label = V(facebook)$group,
main = "Walktrap")
ceb <- cluster_edge_betweenness(facebook)
plot(ceb, facebook, vertex.label = V(facebook)$group,
main = "Edge Betweenness")
cfg <- cluster_fast_greedy(facebook)
plot(cfg, facebook, vertex.label = V(facebook)$group,
main = "Fast Greedy")
clp <- cluster_label_prop(facebook)
plot(clp, facebook, vertex.label = V(facebook)$group,
main = "Label Prop")
cle <- cluster_leading_eigen(facebook)
plot(cle, facebook, vertex.label = V(facebook)$group,
main = "Leading Eigen")
components(facebook)
group <- as.factor(get.vertex.attribute(facebook_net, attrname = 'group'))
pal <- brewer.pal(nlevels(group), "Set1")
plot(facebook_net, vertex.col = pal[group], vertex.cex = 1.5,
main = "Plot of Facebook Data colored by friend type")
legend(x = "bottomleft", legend = levels(group), col = pal,
pch = 19, pt.cex = 1.2, bty = "n", title = "Friend type")
group <- as.factor(get.vertex.attribute(facebook_net, attrname = 'group'))
pal <- brewer.pal(nlevels(group), "Set1")
plot(facebook_net, vertex.col = pal[group], vertex.cex = 1.5,
main = "Plot of Facebook Data colored by friend type")
legend(x = "bottomleft", legend = levels(group), col = pal,
pch = 19, pt.cex = 1.2, bty = "n", title = "Friend type")
group <- as.factor(get.vertex.attribute(facebook_net, attrname = 'group'))
pal <- brewer.pal(nlevels(group), "Set1")
plot(facebook_net, vertex.col = pal[group], vertex.cex = 1.5,
main = "Plot of Facebook Data colored by friend type")
legend(x = "bottomleft", legend = levels(group), col = pal,
pch = 19, pt.cex = 1.2, bty = "n", title = "Friend type")
group <- as.factor(get.vertex.attribute(facebook_net, attrname = 'group'))
pal <- brewer.pal(nlevels(group), "Set1")
plot(facebook_net, vertex.col = pal[group], vertex.cex = 1.5,
main = "Plot of Facebook Data colored by friend type")
legend(x = "bottomleft", legend = levels(group), col = pal,
pch = 19, pt.cex = 1.2, bty = "n", title = "Friend type")
group <- as.factor(get.vertex.attribute(facebook_net, attrname = 'group'))
pal <- brewer.pal(nlevels(group), "Set1")
plot(facebook_net, vertex.col = pal[group], vertex.cex = 1.5,
main = "Plot of Facebook Data colored by friend type")
legend(x = "bottomleft", legend = levels(group), col = pal,
pch = 19, pt.cex = 1.2, bty = "n", title = "Friend type")
group <- as.factor(get.vertex.attribute(facebook_net, attrname = 'group'))
pal <- brewer.pal(nlevels(group), "Set1")
plot(facebook_net, vertex.col = pal[group], vertex.cex = 1.5,
main = "Plot of Facebook Data colored by friend type")
legend(x = "bottomleft", legend = levels(group), col = pal,
pch = 19, pt.cex = 1.2, bty = "n", title = "Friend type")
get.vertex.attribute
group <- as.factor(get.vertex.attribute(facebook_net, attrname = 'sex'))
pal <- brewer.pal(nlevels(group), "Set1")
plot(facebook_net, vertex.col = pal[group], vertex.cex = 1.5,
main = "Plot of Facebook Data colored by friend type")
legend(x = "bottomleft", legend = levels(group), col = pal,
pch = 19, pt.cex = 1.2, bty = "n", title = "Friend type")
group <- as.factor(get.vertex.attribute(facebook_net, attrname = 'relationship_status'))
pal <- brewer.pal(nlevels(group), "Set1")
plot(facebook_net, vertex.col = pal[group], vertex.cex = 1.5,
main = "Plot of Facebook Data colored by friend type")
legend(x = "bottomleft", legend = levels(group), col = pal,
pch = 19, pt.cex = 1.2, bty = "n", title = "Friend type")
library(igraph)
library(network)
sapply(levels(group), function(x) {
y <- get.inducedSubgraph(facebook_net,
which(facebook_net %v% "group" == x))
paste0("Density for ", x, " friends is ",
edge_density(asIgraph(y)))
})
group <- as.factor(get.vertex.attribute(facebook_net, attrname = 'sex'))
library(igraph)
library(network)
library(intergraph)
library(RColorBrewer)
nodes <- read.csv("Facebook_att.csv", header = TRUE)
links <- read.csv("Facebook_edge.csv", header = TRUE)
facebook <- graph_from_data_frame(d = links, vertices = nodes$NodeID, directed = FALSE)
facebook_net <- asNetwork(facebook)
# Load in other attributes.
facebook_net %v% "vertex.names"        <- nodes$vertex.names
facebook_net %v% "sex"                 <- nodes$sex
facebook_net %v% "friend_count"        <- nodes$friend_count
facebook_net %v% "group"               <- nodes$group
facebook_net %v% "mutual_friend_count" <- nodes$mutual_friend_count
facebook_net %v% "na"                  <- nodes$na
facebook_net %v% "relationship_status" <- nodes$relationship_status
summary(facebook_net)
plot(facebook_net, vertex.cex = 1.2, main = "Basic plot of Douglas’s Facebook friends")
plot(facebook_net, vertex.cex = 1.2, main = "Basic plot of Douglas’s Facebook friends")
